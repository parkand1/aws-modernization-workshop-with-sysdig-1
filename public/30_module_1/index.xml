<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module 1 on AWS Modernization Workshop with Sysdig</title>
    <link>//localhost:1313/30_module_1.html</link>
    <description>Recent content in Module 1 on AWS Modernization Workshop with Sysdig</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="//localhost:1313/30_module_1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setup Amazon ECR Registry</title>
      <link>//localhost:1313/30_module_1/30_setup_ecr.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/30_module_1/30_setup_ecr.html</guid>
      <description>For the purposes of this lab you need to create an Amazon ECR registry. To do this, follow the steps below
 Log into your Cloud9 Workspace
 Run the following command to create a repository. The name is arbitrary, but for continuity in the lab please use aws-workshop
  aws ecr create-repository --repository-name aws-workshop --image-scanning-configuration scanOnPush=true  The output will be as follows
{ &amp;quot;repository&amp;quot;: { &amp;quot;repositoryArn&amp;quot;: &amp;quot;arn:aws:ecr:us-east-1:845151661675:repository/aws-workshop&amp;quot;, &amp;quot;registryId&amp;quot;: &amp;quot;845151661675&amp;quot;, &amp;quot;repositoryName&amp;quot;: &amp;quot;aws-workshop&amp;quot;, &amp;quot;repositoryUri&amp;quot;: &amp;quot;845151661675.</description>
    </item>
    
    <item>
      <title>Deploy the Amazon ECR Integration</title>
      <link>//localhost:1313/30_module_1/31_deploy_ecr_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/30_module_1/31_deploy_ecr_integration.html</guid>
      <description>This integration enables the Amazon Elastic Container Registry (ECR) to automatically trigger an action to scan every new container that is pushed into the registry.
 Log into your AWS Console and select &amp;lsquo;US East (N. Virginia) us-east-1&amp;rsquo; from the &amp;lsquo;Select a Region&amp;rsquo; dropdown on the top right.
For the purposes of this exercise we will be using AWS Region us-east-1
 Navigate to this CloudFormation template.  Click Next.  There are two items to update on this screen:</description>
    </item>
    
    <item>
      <title>Push and Scan an Image from the Registry</title>
      <link>//localhost:1313/30_module_1/32_image_from_registry.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/30_module_1/32_image_from_registry.html</guid>
      <description>Download Example Dockerfile and Sources Now that our automatic scanner is in place, we can test it by pushing a Docker container, and check if it scans.
To illustrate the images scanning we will build an example Node.JS application based on the official “hello world” example described in their website.
 Go to your Cloud9 Workspace and download and uncompress example container files
wget https://github.com/sysdiglabs/hello-world-node-vulnerable/releases/download/v1.0/hello-world-node-vulnerable.zip unzip hello-world-node-vulnerable.zip cd hello-world-node-vulnerable/  And build and push the image to ECR</description>
    </item>
    
    <item>
      <title>Modify the image and trigger a second scan</title>
      <link>//localhost:1313/30_module_1/33_image_rescan.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/30_module_1/33_image_rescan.html</guid>
      <description>For illustration purposes, let&amp;rsquo;s rebuild our image and make it more secure by starting with a different Base image. To do so:
 Go back into Cloud9 Workspace Edit the Dockerfile and in the first line update the base image from
FROM node:12  to
FROM bitnami/node:12  The file should look like this
FROM bitnami/node:12 # Create app directory WORKDIR /usr/src/app # Install app dependencies # A wildcard is used to ensure both package.</description>
    </item>
    
  </channel>
</rss>